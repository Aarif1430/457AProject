function  [BestSoln BestSolnCost] = TabuSearch( ...
                ProbData, TabuLength, NumIterations, ...      
                GenInitialSolnFn, GetBestNeighbourSolnFn, size, numOfTurbine)

% This function implements the tabu search algorithm.
%
% Inputs:
%   ProbData: The data of the problem to be solved.
%   TabuLength: The length of the tabu list
%   NumIterations: The maximum number of iterations
%   GenInitialSolnFn: A handle to a function that generates an initial
%                     solution to the problem.
%   GetBestNeighbourSolnFn: A hanlde to a function that generates the 
%                         neighbourhood of a given solution and update
%                         the best neighborhood.
%
% Outputs:
%   BestSoln: The best solution obtained
%   BestSolnCost: The best solution cost

% Generate the initial solution
[Soln SolnCost TabuList] = GenInitialSln(size,numOfTurbine);

% Set the best solution to the initial solution
BestSoln = Soln;
BestSolnCost = SolnCost;

for nIt = 1 : NumIterations
    % Get the best solution in the neighbourhood of the current solution
    % avoiding Tabu moves
    [Soln SolnCost TabuList] = feval(GetBestNeighbourSolnFn, ...
                                Soln, TabuList, TabuLength, BestSolnCost);
            
    % Update the best solution
    if SolnCost < BestSolnCost
        BestSoln = Soln;
        BestSolnCost = SolnCost;
    end
end

end

function [initialM, result, TabuList] = GenInitialSln(size, numTurbine)
    m=zeros(size,size);
    count=0;
    while count<numTurbine
        i=ceil(rand()*size);
        j=ceil(rand()*size);
        if( m(i,j)==0 )
            m(i,j)=1;
            count=count+1;
        end
    end
    
    initialM = m;
    result = CalculateCostFunc(m);
    TabuList=zeros(size,size);
end

function [BestNeighbour BestNeighbourCost TabuList]=GetBestNeighbourSolnFn(Soln, TabuList, TabuLength, BestSolnCost)
    global size
    
    curBestCost = BestSolnCost;
    curBestSoln = Soln;
    potentialTabu = [];
    for i = 1:size
        for j = 1:size
            if Soln(i,j)==1
                %upper left
                if(i-1>0 && j-1>0 && matrix(i-1,j-1)~=1)
                    matrix = Soln;
                    
                    matrix(i-1,j-1)=1;
                    matrix(i,j)=0;
                    
                    cost = CalculateCostFunc(matrix);
                    if(cost < curBestCost)
                        curBestCost = cost;
                        curBestSoln = matrix;
                        potentialTabu=[i-1,j-1];
                    end
                end
                
                %left
                if(i-1>0 && matrix(i-1,j)~=1)
                    matrix = Soln;
                    
                    matrix(i-1,j)=1;
                    matrix(i,j)=0;
                    
                    cost = CalculateCostFunc(matrix);
                    if(cost < curBestCost)
                        curBestCost = cost;
                        curBestSoln = matrix;
                        potentialTabu=[i-1,j];
                    end
                end
                
                %lower left
                if(i-1>0 && j+1<=size && matrix(i-1,j+1)~=1)
                    matrix = Soln;
                    
                    matrix(i-1,j+1)=1;
                    matrix(i,j)=0;
                    
                    cost = CalculateCostFunc(matrix);
                    if(cost < curBestCost)
                        curBestCost = cost;
                        curBestSoln = matrix;
                        potentialTabu=[i-1,j+1];
                    end
                end
                
                %lower
                if( j+1<=size && matrix(i,j+1)~=1)
                    matrix = Soln;
                    
                    matrix(i,j+1)=1;
                    matrix(i,j)=0;
                    
                    cost = CalculateCostFunc(matrix);
                    if(cost < curBestCost)
                        curBestCost = cost;
                        curBestSoln = matrix;
                        potentialTabu=[i,j+1];
                    end
                end
                
                %lower right
                if( i+1<=size && j+1<=size && matrix(i+1,j+1)~=1)
                    matrix = Soln;
                    
                    matrix(i+1,j+1)=1;
                    matrix(i,j)=0;
                    
                    cost = CalculateCostFunc(matrix);
                    if(cost < curBestCost)
                        curBestCost = cost;
                        curBestSoln = matrix;
                        potentialTabu=[i+1,j+1];
                    end
                end
                
                %right
                if( i+1<=size && matrix(i+1,j)~=1)
                    matrix = Soln;
                    
                    matrix(i+1,j)=1;
                    matrix(i,j)=0;
                    
                    cost = CalculateCostFunc(matrix);
                    if(cost < curBestCost)
                        curBestCost = cost;
                        curBestSoln = matrix;
                        potentialTabu=[i+1,j];
                    end
                end
                
                %upper right
                if( i+1<=size && j-1>0 && matrix(i+1,j-1)~=1)
                    matrix = Soln;
                    
                    matrix(i+1,j-1)=1;
                    matrix(i,j)=0;
                    
                    cost = CalculateCostFunc(matrix);
                    if(cost < curBestCost)
                        curBestCost = cost;
                        curBestSoln = matrix;
                        potentialTabu=[i+1,j-1];
                    end
                end
                
                %upper
                if( j-1>0 && matrix(i,j-1)~=1)
                    matrix = Soln;
                    
                    matrix(i,j-1)=1;
                    matrix(i,j)=0;
                    
                    cost = CalculateCostFunc(matrix);
                    if(cost < curBestCost)
                        curBestCost = cost;
                        curBestSoln = matrix;
                        potentialTabu=[i,j-1];
                    end
                end
          
            end%end for if Soln(i,j)==1
        end%end for j loop
    end%end for i loop
    
    BestNeighbour = curBestCost;
    BestNeighbourCost = curBestSoln;
    TabuList 
end
